{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1.3 Advance Analytics with SQL ","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6prITFyhrzB8"},"source":["### Setup\n","Install Kepler.gl, import python packages, and authtenticate."]},{"cell_type":"code","metadata":{"id":"0v_VEfEY1vlc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15575,"status":"ok","timestamp":1605539633502,"user":{"displayName":"Chien An Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgK7jl4veBTOC17MncUCC8BhlGjIuJfzzrIPyTx=s64","userId":"08473693055474355891"},"user_tz":300},"outputId":"3e5e5469-3d92-4c0c-a4ce-fe485db9f4bc"},"source":["!pip install keplergl -q"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\u001b[K     |████████████████████████████████| 7.7MB 3.8MB/s \n","\u001b[K     |████████████████████████████████| 972kB 16.0MB/s \n","\u001b[K     |████████████████████████████████| 14.8MB 282kB/s \n","\u001b[K     |████████████████████████████████| 6.5MB 41.8MB/s \n","\u001b[?25h  Building wheel for keplergl (setup.py) ... \u001b[?25l\u001b[?25hdone\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qod4DgfWe9lD"},"source":["from google.cloud import bigquery\n","from keplergl import KeplerGl\n","import IPython\n","import numpy as np\n","import pandas as pd\n","import branca.colormap as m\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from google.colab import auth\n","from google.cloud import bigquery\n","from google.colab import files\n","\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mGusmuGjjCJt"},"source":["_ = auth.authenticate_user()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pWgXT8Okjx_L"},"source":["bq = bigquery.Client(project='geotab-bootcamp')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Fb-x1vZ1KXXH"},"source":["# Data Exploration:\n","As a first step, we want to to learn how the fleet operates\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"N_zfyS59j6j8","colab":{"base_uri":"https://localhost:8080/","height":623},"executionInfo":{"elapsed":5569,"status":"ok","timestamp":1605539669961,"user":{"displayName":"Chien An Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgK7jl4veBTOC17MncUCC8BhlGjIuJfzzrIPyTx=s64","userId":"08473693055474355891"},"user_tz":300},"outputId":"280a48f6-8588-4362-da75-3433399f2082"},"source":[" q = \"\"\"\n","    With\n","      Skeleton AS\n","      (\n","        Select * \n","        From        ( SELECT * FROM Unnest( GENERATE_ARRAY(1,  7) ) AS DayOfWeek )\n","        Cross Join  ( SELECT * FROM Unnest( GENERATE_ARRAY(0, 23) ) AS HH        )\n","      )\n","\n","    , Trips AS\n","      (\n","        Select \n","            Extract(Hour      From TimeArrived) AS HH\n","          , Extract(DayOfWeek From RouteDate  ) AS DayOfWeek\n","          , Log( Count(*) ,2)                   AS NumTrips_Log2\n","          , CountIf(PickupType ='Scheduled')    AS Scheduled\n","          , CountIf(PickupType ='Adhoc'    )    AS Adhoc\n","          /*\n","          , CountIf(Pickup_DropOff='Pickup'   AND PickupType ='Scheduled') AS Scheduled_Pickup\n","          , CountIf(Pickup_DropOff='Drop Off' AND PickupType ='Scheduled') AS Scheduled_DropOff\n","          , CountIf(Pickup_DropOff='Pickup'   AND PickupType ='Adhoc'    ) AS Adhoc_Pickup\n","          , CountIf(Pickup_DropOff='Drop Off' AND PickupType ='Adhoc'    ) AS Adhoc_DropOff\n","          */\n","        FROM `geotab-bootcamp.Dashboarding.FoodReceived` \n","        Group By 1,2\n","      )\n","\n","    Select\n","        HH\n","      , DayOfWeek\n","      , IfNull( NumTrips_Log2 ,0) AS NumTrips_Log2\n","      , IfNull( Scheduled     ,0) AS Scheduled\n","      , IfNull( Adhoc         ,0) AS Adhoc\n","      /*\n","      , IfNull( Scheduled_Pickup  ,0) AS Scheduled_Pickup\n","      , IfNull( Scheduled_DropOff ,0) AS Scheduled_DropOff\n","      , IfNull( Adhoc_Pickup      ,0) AS Adhoc_Pickup\n","      , IfNull( Adhoc_DropOff     ,0) AS Adhoc_DropOff\n","      */\n","    From Skeleton\n","      left Join Trips Using(DayOfWeek,HH)\n","\"\"\"\n","\n","df = bq.query(q).to_dataframe()\n","df_plot = df.pivot(\"HH\",\"DayOfWeek\",\"NumTrips_Log2\")\n","\n","fig, ax = plt.subplots(figsize=(5,10))\n","sns.heatmap(df_plot, annot=False, linewidths=1,cmap='viridis',ax=ax)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fbbe9b07828>"]},"metadata":{"tags":[]},"execution_count":5},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"p5_VLUBVt5O2","colab":{"base_uri":"https://localhost:8080/","height":714},"executionInfo":{"elapsed":2451,"status":"ok","timestamp":1605539678398,"user":{"displayName":"Chien An Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgK7jl4veBTOC17MncUCC8BhlGjIuJfzzrIPyTx=s64","userId":"08473693055474355891"},"user_tz":300},"outputId":"63e67d8c-5b6c-4bf3-c2d0-aee98d81a988"},"source":["df = df[df.HH.isin(range(6,16))]\n","\n","pivot_cells = [  \n","                [\"Scheduled\",\"Scheduled\"],\n","                [    \"Adhoc\",    \"Adhoc\"]\n","\n","                # [\"Scheduled_Pickup\",\"Scheduled_DropOff\"],\n","                # [    \"Adhoc_Pickup\",    \"Adhoc_DropOff\"]\n","              ]\n","\n","fig, axes = plt.subplots(nrows=2, ncols=2,figsize=(10, 12),sharex=True,sharey=True)\n","\n","for x in range(axes.shape[0]):\n","  for y in range(axes.shape[1]):\n","    sns.heatmap(df.pivot(\"HH\",\"DayOfWeek\",pivot_cells[x][y]), annot=False, linewidths=1,cmap='viridis',ax=axes[x][y])"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x864 with 8 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"KtQpCIS7vyz0"},"source":["### Visualization\n","\n","We will leverage Kepler.gl to visualize our fleets's locations by neighbourhood."]},{"cell_type":"code","metadata":{"id":"ByDHmFSalIV2"},"source":[" q = \"\"\"\n","\n","CREATE TEMP FUNCTION DateFrom() AS (Timestamp('2018-01-01'));\n","CREATE TEMP FUNCTION DateTo  () AS (Timestamp('2019-01-01'));\n","CREATE TEMP FUNCTION StringifyDayOfWeek(DoW INT64) AS\n","(\n","  CASE DoW\n","    WHEN 1 THEN 'Sunday'\n","    WHEN 2 THEN 'Monday'\n","    WHEN 3 THEN 'Tuesday'\n","    WHEN 4 THEN 'Wednesday'\n","    WHEN 5 THEN 'Thursday'\n","    WHEN 6 THEN 'Friday'\n","    WHEN 7 THEN 'Saturday'\n","    ELSE NULL\n","  END\n",");\n","\n","With\n","# Step 0: Create a skeleton to \"zero-fill\" times/places where no data exist ----------------------------------------------------------------\n","  Skeleton AS\n","  (\n","    Select\n","        NeighbourhoodId\n","      , Name\n","      , Geography\n","      , Hour\n","      , Minute\n","      , Dayofweek\n","      , NumWorkingDays\n","    From\n","        `geotab-bootcamp.OpenDatasets.CityOfToronto_Neighbourhood` n\n","      CROSS JOIN Unnest(Generate_Array(2, 6)) AS Dayofweek -- Monday to Friday only\n","      CROSS JOIN Unnest(Generate_Array(7,15)) AS Hour      -- We're intrested only in the fleet's hours of operation: 7AM to 3PM\n","      CROSS JOIN Unnest([0,15,30,45]        ) AS Minute    -- Bucketized time into 15-minute intervals\n","      INNER JOIN\n","      (\n","          SELECT\n","              Extract(Dayofweek From StartTime at Time Zone 'America/Toronto') AS DayofWeek\n","            , COUNT(DISTINCT EXTRACT(Date FROM StartTime) ) AS NumWorkingDays\n","          FROM\n","              `geotab-bootcamp.DSP.Trips`\n","          WHERE\n","                StartTime BETWEEN DateFrom() AND DateTo()\n","            AND EXTRACT(Hour FROM StartTime) BETWEEN 7 AND 13\n","          GROUP BY 1\n","      )\n","      USING(DayOfWeek)\n","  )\n","\n","# Step 1: Calculate # of days in neighbourhood for each vehicle, neighbourhood, and time bucket ----------------------------------------------------------------\n",", Gps AS\n","  (\n","      SELECT \n","          SerialNo \n","        , DateTime\n","        , Geography\n","      FROM\n","          `geotab-bootcamp.DSP.Gps`\n","      WHERE\n","          DateTime BETWEEN DateFrom() AND DateTo() \n","      AND RawGps\n","  )\n","  \n",", Vehicle_Every15Minutes AS \n","  (\n","      SELECT DISTINCT\n","          n.NeighbourhoodId\n","        , g.SerialNo\n","        ,       Extract(Date      From g.DateTime At Time Zone 'America/Toronto')        AS Date\n","        ,       Extract(Dayofweek From g.Datetime at Time Zone 'America/Toronto')        AS DayofWeek\n","        ,       Extract(Hour      From g.DateTime At Time Zone 'America/Toronto')        AS Hour\n","        , FLOOR(Extract(Minute    From g.DateTime At Time Zone 'America/Toronto')/15)*15 AS Minute\n","      FROM Gps g\n","        INNER JOIN  `geotab-bootcamp.OpenDatasets.CityOfToronto_Neighbourhood` n ON ST_COVERS(n.Geography, g.Geography)\n","  )\n","  \n",", Vehicle_DaysInNeighbourhood AS\n","  (\n","      SELECT\n","          SerialNo\n","        , NeighbourhoodId\n","        , DayofWeek\n","        , Hour\n","        , Minute\n","        , Array_Agg(Date) AS DatesInNeighbourhood\n","      FROM\n","          Vehicle_Every15Minutes \n","      GROUP BY\n","          1,2,3,4,5\n","  )\n","  \n","# Step 2: Combined each neighbourhood with all neighbourhoods within 15-minute drive -----------------------------------------\n","\n",", Neighbourhoods_Within15Minutes AS\n","  (\n","      SELECT\n","          SourceId\n","        , DestinationId\n","        , HourOfDay\n","      FROM  `geotab-bootcamp.OpenDatasets.UberMovement_TorontoTravelTime`\n","      WHERE MeanTravelTime_Minutes + StandardDeviationTravelTime_Minutes * 2 <= 15\n","  )\n","  \n",", Vehicle_DaysWithin15Minutes AS \n","  (\n","      SELECT n.* EXCEPT(DatesInNeighbourhood)\n","        , Array_Agg(DISTINCT d) AS DatesInNeighbourhood\n","        , Count(    DISTINCT d) AS NumDaysInArea\n","      FROM\n","      (\n","          SELECT\n","              v.SerialNo\n","            , v.NeighbourhoodId\n","            , v.DayOfWeek\n","            , v.Hour\n","            , v.Minute\n","            , Array_Concat_Agg(v15.DatesInNeighbourhood) AS DatesInNeighbourhood\n","          FROM      \n","              Neighbourhoods_Within15Minutes     n\n","          INNER JOIN Vehicle_DaysInNeighbourhood v    ON n.HourOfDay = v  .Hour AND n.DestinationId = v  .NeighbourhoodId\n","           LEFT JOIN Vehicle_DaysInNeighbourhood v15  ON n.HourOfDay = v15.Hour AND n.SourceId      = v15.NeighbourhoodId\n","                                                     AND v.DayOfWeek = v15.DayOfWeek\n","                                                     AND v.Minute    = v15.Minute          \n","                                                     AND v.SerialNo  = v15.SerialNo\n","          GROUP BY 1,2,3,4,5\n","      ) n\n","      , UNNEST(DatesInNeighbourhood) AS d\n","      GROUP BY 1,2,3,4,5\n","  )\n","  \n","  \n","# Step 3: Aggregate across vehicles for probability of at least 1 vehicle in neighbourhood (or under 15-minute drive away) -----\n","\n",", Prob_AnyVehicleWithin15Minutes AS \n","  (\n","      SELECT n.* EXCEPT(DatesInArea)\n","      --, Array_Agg(DISTINCT d) AS DatesInNeighbourhood\n","        , Count(    DISTINCT d) AS NumDaysInArea\n","      FROM\n","      (\n","          SELECT\n","              NeighbourhoodId\n","            , DayOfWeek\n","            , Hour\n","            , Minute\n","            , Array_Concat_Agg(DatesInNeighbourhood) AS DatesInArea\n","          FROM      \n","              Vehicle_DaysWithin15Minutes   \n","          GROUP BY 1,2,3,4\n","      ) n\n","      , UNNEST(DatesInArea) AS d\n","      GROUP BY 1,2,3,4\n","  )\n","  \n","\n",", Top3Vehicles AS \n","  (\n","    SELECT\n","        NeighbourhoodId\n","      , DayOfWeek\n","      , Hour\n","      , Minute\n","      , Array_Agg( STRUCT(SerialNo ,NumDaysInArea) ORDER BY NumDaysInArea DESC LIMIT 3 /*Take top 3*/) AS Vehicles\n","    FROM\n","        Vehicle_DaysWithin15Minutes\n","    GROUP BY 1,2,3,4\n","  )\n","  \n"," \n","\n","SELECT \n","    s.NeighbourhoodId\n","  , s.Name\n","  , StringifyDayOfWeek( s.Dayofweek )                  AS DayOfWeek\n","  , Format_Time( '%H:%M' , Time( s.Hour, s.Minute,0) ) AS Time\n","  # , s.Hour\n","  # , s.Minute\n","\n","  , s.NumWorkingDays\n","  ,       IfNull(p.NumDaysInArea,0)                   AS NumDaysInArea\n","  , ROUND(IfNull(p.NumDaysInArea,0)/NumWorkingDays,3) AS ProbabilityInArea\n","  , Vehicles\n","  , ST_Simplify(s.Geography,20)                       AS NeighbourhoodGeography\n","FROM\n","  Skeleton s\n","  LEFT JOIN Prob_AnyVehicleWithin15Minutes p USING(NeighbourhoodId, DayOfWeek, Hour, Minute)\n","  LEFT JOIN Top3Vehicles                   v USING(NeighbourhoodId, DayOfWeek, Hour, Minute)\n","ORDER BY\n","    DayOfWeek, Hour,Minute,NeighbourhoodId \n","\"\"\"\n","\n","df = bq.query(q).to_dataframe()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BN0YBWN3qV-X","colab":{"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"elapsed":669,"status":"ok","timestamp":1605539963405,"user":{"displayName":"Chien An Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgK7jl4veBTOC17MncUCC8BhlGjIuJfzzrIPyTx=s64","userId":"08473693055474355891"},"user_tz":300},"outputId":"f5eb370b-e8d1-477e-db1d-5babff12e2bb"},"source":["df. head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NeighbourhoodId</th>\n","      <th>Name</th>\n","      <th>DayOfWeek</th>\n","      <th>Time</th>\n","      <th>NumWorkingDays</th>\n","      <th>NumDaysInArea</th>\n","      <th>ProbabilityInArea</th>\n","      <th>Vehicles</th>\n","      <th>NeighbourhoodGeography</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>York University Heights</td>\n","      <td>Friday</td>\n","      <td>07:00</td>\n","      <td>49</td>\n","      <td>6</td>\n","      <td>0.122</td>\n","      <td>[{'SerialNo': 'G9R3JDXMFCV7', 'NumDaysInArea':...</td>\n","      <td>POLYGON((-79.505249 43.759624, -79.505081 43.7...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>The Beaches</td>\n","      <td>Friday</td>\n","      <td>07:00</td>\n","      <td>49</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","      <td>[]</td>\n","      <td>GEOMETRYCOLLECTION(MULTILINESTRING((-79.294788...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Scarborough Village</td>\n","      <td>Friday</td>\n","      <td>07:00</td>\n","      <td>49</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","      <td>[]</td>\n","      <td>POLYGON((-79.214004 43.726813, -79.213223 43.7...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>South Parkdale</td>\n","      <td>Friday</td>\n","      <td>07:00</td>\n","      <td>49</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","      <td>[]</td>\n","      <td>POLYGON((-79.427812 43.629904, -79.428784 43.6...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>South Riverdale</td>\n","      <td>Friday</td>\n","      <td>07:00</td>\n","      <td>49</td>\n","      <td>0</td>\n","      <td>0.000</td>\n","      <td>[]</td>\n","      <td>GEOMETRYCOLLECTION(MULTILINESTRING((-79.326445...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   NeighbourhoodId  ...                             NeighbourhoodGeography\n","0                1  ...  POLYGON((-79.505249 43.759624, -79.505081 43.7...\n","1                2  ...  GEOMETRYCOLLECTION(MULTILINESTRING((-79.294788...\n","2                3  ...  POLYGON((-79.214004 43.726813, -79.213223 43.7...\n","3                4  ...  POLYGON((-79.427812 43.629904, -79.428784 43.6...\n","4                5  ...  GEOMETRYCOLLECTION(MULTILINESTRING((-79.326445...\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"kyWxpBsw5YTm","colab":{"background_save":true},"outputId":"ada47a3c-716b-4735-b1cd-75bd952a7f24"},"source":["hourlyMap = KeplerGl()\n","\n","\n","config = {\n","  \"version\": \"v1\",\n","  \"config\": {\n","    \"visState\": {\n","      \"filters\": [\n","        {\n","          \"dataId\": [\n","            \"Vehicle Locations\"\n","          ],\n","          \"id\": \"xbrgznpnx\",\n","          \"name\": [\n","            \"Time\"\n","          ],\n","          \"type\": \"timeRange\",\n","          \"value\": [\n","            1597647600000,\n","            1597648517000\n","          ],\n","          \"enlarged\": True,\n","          \"plotType\": \"histogram\",\n","          \"yAxis\": None\n","        },\n","        {\n","          \"dataId\": [\n","            \"Vehicle Locations\"\n","          ],\n","          \"id\": \"m8i219vgg\",\n","          \"name\": [\n","            \"DayOfWeek\"\n","          ],\n","          \"type\": \"multiSelect\",\n","          \"value\": [\n","            \"Monday\"\n","          ],\n","          \"enlarged\": False,\n","          \"plotType\": \"histogram\",\n","          \"yAxis\": None\n","        }\n","      ],\n","      \"layers\": [\n","        {\n","          \"id\": \"ifq6dsa\",\n","          \"type\": \"geojson\",\n","          \"config\": {\n","            \"dataId\": \"Vehicle Locations\",\n","            \"label\": \"Vehicle Locations\",\n","            \"color\": [\n","              18,\n","              147,\n","              154\n","            ],\n","            \"columns\": {\n","              \"geojson\": \"NeighbourhoodGeography\"\n","            },\n","            \"isVisible\": True,\n","            \"visConfig\": {\n","              \"opacity\": 0.8,\n","              \"strokeOpacity\": 0.8,\n","              \"thickness\": 0.5,\n","              \"strokeColor\": [\n","                221,\n","                178,\n","                124\n","              ],\n","              \"colorRange\": {\n","                \"name\": \"ColorBrewer OrRd-6\",\n","                \"type\": \"sequential\",\n","                \"category\": \"ColorBrewer\",\n","                \"colors\": [\n","                  \"#fef0d9\",\n","                  \"#fdd49e\",\n","                  \"#fdbb84\",\n","                  \"#fc8d59\",\n","                  \"#e34a33\",\n","                  \"#b30000\"\n","                ]\n","              },\n","              \"strokeColorRange\": {\n","                \"name\": \"Global Warming\",\n","                \"type\": \"sequential\",\n","                \"category\": \"Uber\",\n","                \"colors\": [\n","                  \"#5A1846\",\n","                  \"#900C3F\",\n","                  \"#C70039\",\n","                  \"#E3611C\",\n","                  \"#F1920E\",\n","                  \"#FFC300\"\n","                ]\n","              },\n","              \"radius\": 10,\n","              \"sizeRange\": [\n","                0,\n","                10\n","              ],\n","              \"radiusRange\": [\n","                0,\n","                50\n","              ],\n","              \"heightRange\": [\n","                0,\n","                500\n","              ],\n","              \"elevationScale\": 5,\n","              \"stroked\": True,\n","              \"filled\": True,\n","              \"enable3d\": True,\n","              \"wireframe\": False\n","            },\n","            \"hidden\": False,\n","            \"textLabel\": [\n","              {\n","                \"field\": None,\n","                \"color\": [\n","                  255,\n","                  255,\n","                  255\n","                ],\n","                \"size\": 18,\n","                \"offset\": [\n","                  0,\n","                  0\n","                ],\n","                \"anchor\": \"start\",\n","                \"alignment\": \"center\"\n","              }\n","            ]\n","          },\n","          \"visualChannels\": {\n","            \"colorField\": {\n","              \"name\": \"ProbabilityInArea\",\n","              \"type\": \"real\"\n","            },\n","            \"colorScale\": \"quantize\",\n","            \"sizeField\": None,\n","            \"sizeScale\": \"linear\",\n","            \"strokeColorField\": None,\n","            \"strokeColorScale\": \"quantile\",\n","            \"heightField\": {\n","              \"name\": \"ProbabilityInArea\",\n","              \"type\": \"real\"\n","            },\n","            \"heightScale\": \"linear\",\n","            \"radiusField\": None,\n","            \"radiusScale\": \"linear\"\n","          }\n","        }\n","      ],\n","      \"interactionConfig\": {\n","        \"tooltip\": {\n","          \"fieldsToShow\": {\n","            \"Vehicle Locations\": [\n","              {\n","                \"name\": \"Name\",\n","                \"format\": None\n","              },\n","              {\n","                \"name\": \"Time\",\n","                \"format\": None\n","              },\n","              {\n","                \"name\": \"ProbabilityInArea\",\n","                \"format\": None\n","              }\n","            ]\n","          },\n","          \"compareMode\": False,\n","          \"compareType\": \"absolute\",\n","          \"enabled\": True\n","        },\n","        \"brush\": {\n","          \"size\": 0.5,\n","          \"enabled\": False\n","        },\n","        \"geocoder\": {\n","          \"enabled\": False\n","        },\n","        \"coordinate\": {\n","          \"enabled\": False\n","        }\n","      },\n","      \"layerBlending\": \"normal\",\n","      \"splitMaps\": [],\n","      \"animationConfig\": {\n","        \"currentTime\": None,\n","        \"speed\": 1\n","      }\n","    },\n","    \"mapState\": {\n","      \"bearing\": 24,\n","      \"dragRotate\": True,\n","      \"latitude\": 43.68852481096602,\n","      \"longitude\": -79.39369327541323,\n","      \"pitch\": 50,\n","      \"zoom\": 10.469590572966071,\n","      \"isSplit\": False\n","    },\n","    \"mapStyle\": {\n","      \"styleType\": \"dark\",\n","      \"topLayerGroups\": {},\n","      \"visibleLayerGroups\": {\n","        \"label\": True,\n","        \"road\": True,\n","        \"border\": False,\n","        \"building\": True,\n","        \"water\": True,\n","        \"land\": True,\n","        \"3d building\": False\n","      },\n","      \"threeDBuildingColor\": [\n","        9.665468314072013,\n","        17.18305478057247,\n","        31.1442867897876\n","      ],\n","      \"mapStyles\": {}\n","    }\n","  }\n","}\n","\n","\n","hourlyMap.add_data(data=df,name='Vehicle Locations')\n","hourlyMap.config = config\n","hourlyMap.save_to_html(file_name='hourlyMap.html')\n","files.download('hourlyMap.html') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["User Guide: https://docs.kepler.gl/docs/keplergl-jupyter\n","Map saved to hourlyMap.html!\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_5844603b-4ddc-4c89-ba54-87502adc6dfc\", \"hourlyMap.html\", 18248896)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]}]}